{"version":3,"sources":["components/ListItem.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","props","listItems","items","map","item","className","key","type","id","value","text","onChange","e","updateItem","target","icon","onClick","deleteItem","duration","easing","library","add","faTrash","App","state","currentItem","handleInput","bind","addItem","this","setState","Date","now","preventDefault","newItem","newitems","console","log","filteredItems","filter","val","onSubmit","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6TAiCeA,MA5Bf,SAAkBC,GACd,IACMC,EADQD,EAAME,MACEC,KAAI,SAAAC,GAElB,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KACnC,2BACI,2BAAOC,KAAK,OACZC,GAAIJ,EAAKE,IACTG,MAAOL,EAAKM,KACZC,SAAU,SAACC,GAAKZ,EAAMa,WAAWD,EAAEE,OAAOL,MAAML,EAAKE,QACzD,8BACI,kBAAC,IAAD,CAAiBD,UAAU,UAC3BU,KAAK,QACLC,QAAS,kBAAIhB,EAAMiB,WAAWb,EAAKE,cAKnD,OAEA,6BACI,kBAAC,IAAD,CAAUY,SAAW,IAAKC,OAAO,eAChClB,K,eCrBTmB,IAAQC,IAAIC,K,IAyFGC,E,kDAtFb,WAAYvB,GAAO,IAAD,8BAChB,cAAMA,IACDwB,MAAM,CACTtB,MAAM,GACNuB,YAAY,CACVf,KAAK,GACLJ,IAAI,KAGR,EAAKoB,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAS,EAAKA,QAAQD,KAAb,gBACd,EAAKV,WAAY,EAAKA,WAAWU,KAAhB,gBACjB,EAAKd,WAAY,EAAKA,WAAWc,KAAhB,gBAZD,E,wDAeNf,GACViB,KAAKC,SAAS,CACZL,YAAY,CACVf,KAAKE,EAAEE,OAAOL,MACdH,IAAIyB,KAAKC,W,8BAKPpB,GAEJA,EAAEqB,iBACF,IAAMC,EAASL,KAAKL,MAAMC,YAE1B,GAAkB,KAAfS,EAAQxB,KAAU,CACnB,IAAMyB,EAAS,GAAD,mBAAKN,KAAKL,MAAMtB,OAAhB,CAAsBgC,IACpCL,KAAKC,SAAS,CACZ5B,MAAMiC,EACNV,YAAY,CACVf,KAAK,GACLJ,IAAI,MAGR8B,QAAQC,IAAIR,KAAKL,MAAMtB,U,iCAGlBI,GACT,IAAMgC,EAAeT,KAAKL,MAAMtB,MAAMqC,QAAO,SAAAnC,GAAI,OAC7CA,EAAKE,MAAMA,KACfuB,KAAKC,SAAS,CACZ5B,MAAMoC,M,iCAIDE,EAAIlC,GAEb,IAAMJ,EAAO2B,KAAKL,MAAMtB,MACxBA,EAAMC,KAAI,SAAAC,GACLA,EAAKE,MAAMA,IAEZF,EAAKM,KAAK8B,MAGdX,KAAKC,SAAS,CACZ5B,MAAMA,M,+BAOR,OACE,yBAAKG,UAAU,OACf,gCACE,0BAAMG,GAAG,aAAaiC,SAAUZ,KAAKD,SACnC,2BAAOrB,KAAK,OACZmC,YAAY,aACZ/B,SAAUkB,KAAKH,YACfjB,MAAOoB,KAAKL,MAAMC,YAAYf,OAE9B,4BAAQH,KAAK,UAAb,SAGJ,kBAAC,EAAD,CAAUL,MAAQ2B,KAAKL,MAAMtB,MAAOe,WAAaY,KAAKZ,WAAYJ,WAAYgB,KAAKhB,kB,GA/ErE8B,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.76e0f971.chunk.js","sourcesContent":["import React,{Component} from 'react' ;\nimport './ListItem.css'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport FlipMove from 'react-flip-move';\n\nfunction ListItem(props){\n    const items = props.items;\n    const listItems=items.map(item=>\n        {\n            return <div className=\"list\" key={item.key}>\n                <p>\n                    <input type=\"text\" \n                    id={item.key} \n                    value={item.text}\n                    onChange={(e)=>{props.updateItem(e.target.value,item.key)}}/>\n                <span >\n                    <FontAwesomeIcon className=\"faicons\" \n                    icon=\"trash\"\n                    onClick={()=>props.deleteItem(item.key)}/>\n                </span>\n                </p>\n            </div>\n        });\n    return(\n\n    <div>\n        <FlipMove duration ={500} easing=\"ease-in-out\">\n        {listItems}\n        </FlipMove>\n       </div>\n    )\n}\n\nexport default ListItem;","import React,{Component} from 'react';\nimport './App.css';\nimport ListItem from './components/ListItem'\nimport {library} from '@fortawesome/fontawesome-svg-core'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faTrash);\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      items:[],\n      currentItem:{\n        text:'',\n        key:''\n      }\n    }\n    this.handleInput = this.handleInput.bind(this);\n    this.addItem =this.addItem.bind(this);\n    this.deleteItem =this.deleteItem.bind(this);\n    this.updateItem =this.updateItem.bind(this);\n  }\n\n  handleInput(e){\n    this.setState({\n      currentItem:{\n        text:e.target.value,\n        key:Date.now()\n      }\n    })\n  }\n\n  addItem(e)\n  {\n      e.preventDefault();\n      const newItem =this.state.currentItem;\n     // console.log(newItem);\n      if(newItem.text!==\"\"){\n        const newitems=[...this.state.items,newItem];\n        this.setState({\n          items:newitems,\n          currentItem:{\n            text:'',\n            key:''\n          }\n        })\n        console.log(this.state.items);\n      }\n  }\n  deleteItem(key){\n    const filteredItems= this.state.items.filter(item=>\n        item.key!==key);\n    this.setState({\n      items:filteredItems\n    })\n  }\n\nupdateItem(val,key)\n{\n  const items =this.state.items\n  items.map(item =>{\n    if(item.key===key)\n    {\n      item.text=val;\n    }\n  })\n  this.setState({\n    items:items\n  })\n}\n\n\n  render(){\n\n  return (\n    <div className=\"App\">\n    <header>\n      <form id=\"to-do-form\" onSubmit={this.addItem}>\n        <input type=\"text\" \n        placeholder=\"Enter Text\" \n        onChange={this.handleInput}\n        value={this.state.currentItem.text}\n        />\n        <button type=\"submit\">Add</button>\n      </form>\n    </header>\n    <ListItem items= {this.state.items} deleteItem ={this.deleteItem} updateItem={this.updateItem}></ListItem>\n\n    </div>\n  );\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}